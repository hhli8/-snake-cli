#! /usr/bin/env node
const { Command } = require('commander');
const packageInfo = require('../package.json');
// const checkNewVersion = require('../lib/checkNewVersion');
// const chalk = require('chalk');

// function errorHandler(err) {
//   // console.error(chalk.white.bgRed(' Error '), err.message || err);
//   console.error(err);
//   process.exit(1);
// }

// process.on('uncaughtException', errorHandler);
// process.on('unhandledRejection', errorHandler);

async function main() {
  // await checkNewVersion();

  const mk = new Command('mk');

  mk.name('mk')
    .usage('<command> [options]')
    .version(packageInfo.version, '-v, --version')
    .command('init', '新建项目', { executableFile: 'init', isDefault: false })
    .command('gen', '新建模块/页面', { executableFile: 'gen', isDefault: false })
    .command('init-lint', '初始化lint', { executableFile: 'init-lint', isDefault: false })
    .command('up-micro', '升级微前端', { executableFile: 'up-micro', isDefault: false })
    .command('fix-routes', '修复路由动态import语法', { executableFile: 'fix-routes', isDefault: false })
    // .exitOverride((error) => {
    // checkNewVersion().then(console.log);
    // })
    .parse(process.argv);
}

main();
