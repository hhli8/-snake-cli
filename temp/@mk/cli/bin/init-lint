#! /usr/bin/env node
// require('../lib/writeNpmrc')();
const { Command } = require('commander');
const path = require('path');
const fs = require('fs-extra');
const _ = require('lodash');
const chalk = require('chalk');
const execSync = require('../lib/execSync');
// const { execSync } = require('child_process');

const theCommand = new Command('init-lint');

theCommand
  .description('add lint and rules')
  .option('-f,--force', 'force to update')
  .action(action);

const CWD = process.cwd();
const { log } = console;
const success = str => log(chalk.green(str));

let hasEslint = false;
let hasPrettier = false;
let hasStyleLint = false;
let hasCommitLint = false;
let hasVersionCheck = false;
let hasHusky = false;
let hasLintStaged = false;
let hasEditorconfig = false;
let hasVscodeSetting = false;
const vscodeSettingFilePath = path.resolve(CWD, '.vscode/settings.json');

/**
 * @function 以对象形式获取package.json
 */
function getPkgJson() {
  const pkgJsonPath = path.resolve(CWD, 'package.json');
  const pkgJson = fs.readFileSync(pkgJsonPath).toString();
  return JSON.parse(pkgJson);
}

/**
 * @function 在宿主安装依赖
 */
function installPkg() {
  if (!theCommand.force) {
    if (hasHusky || hasLintStaged) {
      throw Error('请检查是否已存在lint相关配置');
    }
  }

  const pkgs = [
    'yorkie@^2',
    'lint-staged@^10',
    '@mk/rules@^3.4.4',
    '@mk/eslint-config@^2.7',
    // '@mk/eslint-config-ts@^0',
    '@mk/eslint-config-vue@vue2',
    'eslint@^7',
    'prettier@^2',
    'stylelint@^13',
    // 'stylelint-scss@^3',
    '@commitlint/cli@^12',
  ];

  if (theCommand.force || !hasVersionCheck) {
    pkgs.push('check-versions-in-packagejson');
  }

  execSync(
    `npm uninstall ${[
      'husky',
      '@mk/eslint-plugin',
      '@vue/eslint-config-prettier',
      'eslint-import-resolver-webpack',
      'eslint-plugin-vue',
      // 'eslint-plugin-prettier',
      // 'eslint-config-prettier',
      'babel-eslint',
    ].join(' ')}`,
    { cwd: CWD },
  );

  execSync(`yarn add ${pkgs.join(' ')} -D`, { cwd: CWD });
}

/**
 * @function 写package.json配置
 */
function writePkgJson() {
  const pkgJsonPath = path.resolve(CWD, 'package.json');
  const pkgJson = fs.readFileSync(pkgJsonPath).toString();
  const packageJson = JSON.parse(pkgJson);
  delete packageJson.husky;

  // 写pkg
  packageJson.gitHooks = {
    'pre-commit': 'lint-staged',
    'commit-msg': 'commitlint -Ve',
  };
  packageJson['lint-staged'] = {
    'src/**/*.{js,jsx,ts,tsx,vue}': ['eslint --fix', 'prettier --write'],
    'src/**/*.{vue,sass,scss,less,css}': ['stylelint --fix', 'prettier --write'],
  };

  if (theCommand.force || !hasVersionCheck) {
    [
      'dev',
      'dev:dev',
      'dev:test',
      'dev:wapa',
      'dev:beta',
      'start',
      'build',
      'build:dev',
      'build:test',
      'build:wapa',
      'build:beta',
    ].forEach(scriptName => {
      packageJson.scripts[`pre${scriptName}`] = 'check-versions';
    });
  }

  fs.writeFileSync(pkgJsonPath, JSON.stringify(packageJson, null, 2));
}

function writeConfigFiles() {
  // fs.copyFileSync(
  //   path.resolve(__dirname, '../lib/up-micro/fix-staged.config.js'),
  //   path.resolve(CWD, 'fix-staged.config.js'),
  // );

  if (theCommand.force || !hasEslint) {
    // 写.eslintrc
    fs.writeFileSync(
      path.resolve(CWD, '.eslintrc.js'),
      `module.exports = {
  extends: ['@mk', '@mk/vue'],
  rules: {
    // your rules
  },
};
`,
    );
  }

  if (theCommand.force || !hasStyleLint) {
    fs.writeFileSync(
      path.resolve(CWD, '.stylelintrc.js'),
      `module.exports = {
  extends: [require.resolve('@mk/rules/stylelint')],
  plugins: ['stylelint-scss'],
  rules: {
    // your rules
    "at-rule-no-unknown": null,
    "scss/at-rule-no-unknown": true,
  },
};`,
    );
  }

  if (theCommand.force || !hasCommitLint) {
    fs.writeFileSync(
      path.resolve(CWD, '.commitlintrc.js'),
      "module.exports = require('@mk/rules/commitlint');",
    );
  }

  if (theCommand.force || !hasPrettier) {
    fs.removeSync(path.resolve(CWD, '.prettierrc'));
    fs.writeFileSync(
      path.resolve(CWD, '.prettierrc.js'),
      "module.exports = require('@mk/rules/prettier');",
    );
  }
  if (theCommand.force || !hasEditorconfig) {
    fs.copyFileSync(
      path.resolve(CWD, 'node_modules/@mk/rules/.editorconfig'),
      path.resolve(CWD, '.editorconfig'),
    );
  }
  if (theCommand.force || !hasVscodeSetting) {
    fs.ensureFileSync(vscodeSettingFilePath);
    fs.copyFileSync(
      path.resolve(CWD, 'node_modules/@mk/eslint-config-vue/settings.json'),
      vscodeSettingFilePath,
    );
    //
    const gitignorePath = path.resolve(CWD, '.gitignore');
    fs.writeFileSync(
      gitignorePath,
      fs.readFileSync(gitignorePath, 'utf-8').replace(/\/?\.vscode\/?/, ''),
    );
  }
}

/**
 * @function 检查文件是否存在
 *
 * @param totalMatch 传入的文件名参数是否需要完全匹配
 */
function checkFileExist(fileName, totalMatch = true) {
  const list = fs.readdirSync(CWD);
  const files = _.filter(list, name => {
    if (_.isRegExp(fileName)) {
      return fileName.test(name);
    }
    return totalMatch ? fileName === name : name.includes(fileName);
  });

  if (files.length === 0) {
    return false;
  }

  return files;
}

function checkConfigExist(filename, pkgConfigKey) {
  const pkg = getPkgJson();
  return checkFileExist(filename, false) || pkgConfigKey in pkg;
}

/**
 * @function 检查配置是否已存在
 */
function checkConfig() {
  const pkgJson = getPkgJson();
  // 检查是否已有eslint配置
  hasEslint = checkConfigExist('eslint', 'eslintConfig');
  // 检查是否已有stylelint配置
  hasStyleLint = checkConfigExist('stylelint', 'stylelint');
  // 检查是否已有commitlint配置
  hasCommitLint = checkConfigExist('commitlint', 'commitlint');
  hasPrettier = checkConfigExist('prettier', 'prettier');
  hasHusky = checkConfigExist('husky', 'husky') || 'yorkie' in pkgJson.devDependencies;
  hasLintStaged = checkConfigExist('staged', 'lint-staged');
  hasVersionCheck = 'prebuild' in pkgJson.scripts;
  hasEditorconfig = checkConfigExist('editorconfig', 'editorconfig');
  hasVscodeSetting = fs.existsSync(vscodeSettingFilePath);
}

/**
 * @function 自动化lint配置初始化
 * @description 配置eslint、stylelint、commitlint并安装相关依赖
 */
function action() {
  require('../lib/check-is-root');
  if (!theCommand.force) {
    success('✈️  检查配置');
    // 检查已有配置
    checkConfig();
  }
  success('🚬  开始安装依赖');
  installPkg();
  success('🔨  写入配置文件');
  writeConfigFiles();
  success('🔨  配置写入package.json');
  writePkgJson();
  success('🎉  lint初始化完成  ✈️ ✈️ ');
}

theCommand.parse(process.argv);
// module.exports = function makeCommand(parent) {
//   return theCommand;
// };
