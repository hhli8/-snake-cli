#! /usr/bin/env node
const { Command } = require('commander');
const inquirer = require('inquirer');
// const execa = require("execa");
// const child_process = require("child_process");
const path = require('path');
const fs = require('fs');
const downloadGit = require('download-git-repo');
const execAsync = require('../lib/execAsync');
const config = require('../config');
const renderDir = require('../lib/renderDir');

const theCommand = new Command('init');

theCommand
  .name('init')
  .usage('[project-name]')
  .description('init a new project')
  .action(action);

async function gitClone(url, dest) {
  return new Promise((resolve, reject) => {
    downloadGit(url, dest, { clone: true }, err => {
      if (err) reject(err);
      else resolve();
    });
  });
}

async function action() {
  let [projectName] = theCommand.args;
  if (!projectName) {
    const ans = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: '目录名',
      },
    ]);
    projectName = ans.projectName;
  }
  const cwd = path.resolve(process.cwd(), projectName);
  if (fs.existsSync(cwd)) {
    throw new Error('目录已存在');
  }

  const ans = await inquirer.prompt([
    {
      type: 'list',
      name: 'templateUrl',
      message: '选择一个模板',
      choices: config.templatesChoices,
    },
    // {
    //   type: 'list',
    //   name: 'pkgManager',
    //   message: '安装依赖',
    //   choices: config.pkgManagerChoices,
    // },
  ]);

  await execAsync('rm -rf tmp');
  // await execAsync(`git clone --progress ${ans.templateUrl} tmp`);
  await gitClone(ans.templateUrl, 'tmp');
  await execAsync('npm i', { cwd: `${process.cwd()}/tmp` });

  const meta = require(`${process.cwd()}/tmp/meta`);
  await renderDir(`${process.cwd()}/tmp`, 'template', `../${projectName}`, meta, {
    name: projectName,
  });

  const commands = [
    'rm -rf .git',
    'git init && git checkout -b online && git add .',
    "git commit -nam 'init'",
  ];
  if (ans.pkgManager && ans.pkgManager !== 'none') commands.push(ans.pkgManager);

  for (let i = 0; i < commands.length; i++) {
    await execAsync(commands[i], { cwd });
  }

  await execAsync('rm -rf tmp');
  console.log('✨ done');
}

theCommand.parse(process.argv);
